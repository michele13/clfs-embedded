<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<!-- Common GCC-Static -->

<sect1 id="ch-cross-tools-gcc-static" role="wrap">
  <?dbhtml filename="gcc-static.html"?>

  <title>GCC-&gcc-version; - Static</title>

  <indexterm zone="ch-cross-tools-gcc-static">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>cross tools, static</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>The GCC package contains the GNU compiler collection, which includes
    the C compiler.</para>

  </sect2>

  <sect2 role="installation">
    <title os="a">Installation of Cross GCC Compiler with Static libgcc
    and no Threads</title>

  <para os="aa">In order to work with musl, GCC needs to be patched:</para>

<screen os="ab"><userinput>patch -Np1 -i ../&gcc-musl-patch;</userinput></screen>

    <para os="b">GCC requires the GMP, MPFR, and MPC packages to either be
    present on the host or to be present in source form within the gcc source
    tree.  Unpack these into the GCC directory after unpacking GCC:</para>

<screen os="ba"><userinput>tar xf ../mpfr-&mpfr-version;.tar.bz2
mv -v mpfr-&mpfr-version; mpfr
tar xf ../gmp-&gmp-version;.tar.bz2
mv -v gmp-&gmp-version; gmp
tar xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para os="c">The GCC documentation recommends building GCC outside of the source
    directory in a dedicated build directory:</para>

<screen os="d"><userinput>mkdir -v ../gcc-build
cd ../gcc-build</userinput></screen>

    <para os="e">Prepare GCC for compilation:</para>

<!-- This is the common configure line for GCC-Static. -->
<!-- It's not actually used by any arch but is here for reference. -->
<screen os="ae"><userinput>../gcc-&gcc-version;/configure \
  --prefix=${CLFS}/cross-tools \
  --build=${CLFS_HOST} \
  --host=${CLFS_HOST} \
  --target=${CLFS_TARGET} \
  --with-sysroot=${CLFS}/cross-tools/${CLFS_TARGET} \
  --disable-nls  \
  --disable-shared \
  --without-headers \
  --with-newlib \
  --disable-decimal-float \
  --disable-libgomp \
  --disable-libmudflap \
  --disable-libssp \
  --disable-libatomic \
  --disable-libquadmath \
  --disable-threads \
  --enable-languages=c \
  --disable-multilib \
  --with-mpfr-include=$(pwd)/../gcc-&gcc-version;/mpfr/src \
  --with-mpfr-lib=$(pwd)/mpfr/src/.libs</userinput></screen>

    <variablelist os="af">
      <title>The meaning of the configure options:</title>

      <varlistentry os="af1">
        <term><parameter>--prefix=${CLFS}/cross-tools</parameter></term>
        <listitem>
          <para>This tells the configure script to prepare to install the
          package in the <filename class="directory">${CLFS}/cross-tools</filename>
          directory.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af2">
        <term><parameter>--build=${CLFS_HOST}</parameter></term>
        <listitem>
          <para>This tells the configure script the triplet to use to build GCC.
          It will use ${CLFS_HOST} as that's where it's being built.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af3">
        <term><parameter>--host=${CLFS_HOST}</parameter></term>
        <listitem>
          <para>This tells the configure script the triplet of the machine GCC 
          will be executed on when actually cross compiling.  It will use 
          ${CLFS_HOST} as that's where GCC will execute when cross compiling
          software later.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af4">
        <term><parameter>--target=${CLFS_TARGET}</parameter></term>
        <listitem>
          <para>This tells the configure script the triplet of the machine GCC
          will build executables for.  It will use ${CLFS_TARGET} so that software
          compiled with this version of GCC can be executed on the embedded machine
          target.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af5">
        <term><parameter>--with-sysroot=${CLFS}/cross-tools/${CLFS_TARGET}</parameter></term>
        <listitem>
          <para>This tells configure that ${CLFS}/cross-tools/${CLFS_TARGET} is going
          to be the temporary root of our system. It will now use the specified
          sysroot as a prefix of the default search paths.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af6">
        <term><parameter>--disable-nls</parameter></term>
        <listitem>
          <para>This disables internationalization as i18n is not needed for the
          cross-compile tools.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af7">
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>Disables the creation of the shared libraries.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af11">
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>Tells configure to not use any headers from any C libraries.
          This is needed as we haven't yet built the C library and to prevent
          influence from the host environment.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af12">
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>Tells configure to build libgcc without needing any C
          libraries.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af13">
        <term><parameter>--disable-decimal-float</parameter></term>
        <listitem>
          <para>Tells configure to disable IEEE 754-2008 decimal floating
          point support.  Decimal floating point support isn't needed yet.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af14">
        <term><parameter>--disable-libgomp</parameter></term>
        <listitem>
          <para>Tells configure to not build the GOMP run-time libraries.
          GOMP is the GNU implementation of OpenMP, a API for shared-memory
          parallel programming.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af15">
        <term><parameter>--disable-libmudflap</parameter></term>
        <listitem>
          <para>Tells configure to not build libmudflap.  Mudflap is a 
          library that can be used to help check for proper pointer usage.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af16">
        <term><parameter>--disable-libssp</parameter></term>
        <listitem>
          <para>Tells configure not to build run-time libraries for stack
          smashing detection.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af17">
        <term><parameter>--disable-libatomic</parameter></term>
        <listitem>
          <para>Tells configure not to build atomic operations.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af18">
        <term><parameter>--disable-libquadmath</parameter></term>
        <listitem>
          <para>Tells configure not to build quad math operations.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af19">
        <term><parameter>--disable-threads</parameter></term>
        <listitem>
          <para>This will prevent GCC from looking for the multi-thread
          include files, since they haven't been created for this architecture
          yet. GCC will be able to find the multi-thread information after
          the glib headers are created.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af20">
        <term><parameter>--enable-languages=c</parameter></term>
        <listitem>
          <para>This option ensures that only the C compiler is built.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af21">
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>This option specifies that multiple target libraries should
          not be built.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af22">
        <term><parameter>--with-mpfr-include=$(pwd)/../gcc-&gcc-version;/mpfr/src</parameter></term>
        <listitem>
          <para>Tells configure how to find the mpfr headers.</para>
        </listitem>
      </varlistentry>

      <varlistentry os="af23">
        <term><parameter>--with-mpfr-lib=$(pwd)/mpfr/src/.libs</parameter></term>
        <listitem>
          <para>Tells configure to use the mpfr libraries built within the GCC
            build directory.  This happens automatically but is needed to
            prevent GCC from searching the host's normal library paths.</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para os="ah">Continue with compiling the package:</para>

<screen os="ai"><userinput>make all-gcc all-target-libgcc</userinput></screen>

    <para os="aj">Install the package:</para>

<screen os="ak"><userinput>make install-gcc install-target-libgcc</userinput></screen>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>Details on this package are located in <xref
    linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
